// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext {
        kotlin_version = "1.5.31"
        compose_version = "1.1.0-beta02"
        navigation_compose = "2.4.0-beta02"
        hilt_version = "2.40"
        hiltComposeNavigation = "1.0.0-alpha03"
        room_version = "2.3.0"
        timberVersion = "5.0.1"
        accompanist_version = "0.21.1-beta"
        junit_version = "4.13.2"
        mockk_version = "1.12.0"
        androidx_lifecycle = "2.4.0"
        androidx_test = "1.4.0"
        androidx_test_junit = "1.1.3"
        androidx_test_truth = "1.4.0"
        androidx_test_espresso = "3.4.0"
        kotlinx_coroutines_version = "1.5.2"
        google_truth_version = "1.1.3"
        kotest_version = "4.6.2"
        robolectric_version = "4.5.1"
    }
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        classpath "com.google.dagger:hilt-android-gradle-plugin:$hilt_version"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id "com.diffplug.spotless" version "5.15.0"
}

subprojects {
    apply plugin: 'com.diffplug.spotless'
    spotless {
        kotlin {
            target "**/*.kt"
            targetExclude("$buildDir/**/*.kt")
            ktlint("0.42.1")
        }
    }
}

//task createSpotlessPreCommitHook() {
//    def gitHooksPreCommitFile = new File("$project.rootDir/.git/hooks/pre-commit")
//    if (!gitHooksPreCommitFile.exists()) {
//        def gitHooksDirectory = new File("$project.rootDir/.git/hooks/")
//        if (!gitHooksDirectory.exists()) gitHooksDirectory.mkdirs()
//        new File("$project.rootDir/.git/hooks", "pre-commit").text =
//                """#!/bin/sh
//
//echo "Running spotless"
//./gradlew :app:spotlessApply
//git add .
//"""
//        "chmod +x .git/hooks/pre-commit".execute()
//        println("pre-commit gitHook created successfully")
//    } else {
//        println("pre-commit gitHook exists")
//    }
//}
